import net.fabricmc.loom.api.mappings.layered.MappingContext
import net.fabricmc.loom.api.mappings.layered.MappingLayer
import net.fabricmc.loom.api.mappings.layered.MappingsNamespace
import net.fabricmc.loom.api.mappings.layered.spec.MappingsSpec
import net.fabricmc.loom.configuration.providers.mappings.intermediary.IntermediaryMappingLayer
import net.fabricmc.mappingio.MappingVisitor
import net.fabricmc.mappingio.tree.MappingTreeView
import net.fabricmc.mappingio.tree.MemoryMappingTree


// Credits to DarkPred for setting up the gekolib conflicts

plugins {
    id 'com.github.johnrengelman.shadow' version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    // Geckolib for Fabric
    modImplementation("software.bernie.geckolib:geckolib-fabric-1.18:${geckoLibVersion}")

    mappings(loom.layered {
        officialMojangMappings()
//        parchment("org.parchmentmc.data:parchment-$parchment_mc_version:$parchment_date@zip")
        addLayer(new FixGeckoLibSpec())
    })
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}


class FixGeckoLibSpec implements MappingsSpec<FixGeckoLibLayer> {

    @Override
    FixGeckoLibLayer createLayer(MappingContext context) {
        return new FixGeckoLibLayer()
    }

    @Override
    int hashCode() {
        return "FixGeckoLibLayer".hashCode()
    }
}

class FixGeckoLibLayer implements MappingLayer {
    private final Map METHOD_NAME_MAP = Map.of("getTextureLocation", "_getTextureLocation");

    @Override
    void visit(MappingVisitor mappingVisitor) throws IOException {
        MemoryMappingTree memoryMappingTree = (MemoryMappingTree) mappingVisitor
        var getClasses = MappingTreeView.getDeclaredMethod("getClasses")
        var getMethods = MappingTreeView.ClassMappingView.getDeclaredMethod("getMethods")
        var getName = MappingTreeView.ElementMappingView.getDeclaredMethod("getName", String.class)
        var entryClass = Class.forName("net.fabricmc.mappingio.tree.MemoryMappingTree\$Entry")
        var srcNameField = entryClass.getDeclaredField("srcName")
        srcNameField.setAccessible(true)
        for (final def classEntry in getClasses.invoke(memoryMappingTree)) {
            for (final def methodEntry in getMethods.invoke(classEntry)) {
                var it = METHOD_NAME_MAP.get(getName.invoke(methodEntry, MappingsNamespace.NAMED.toString()))
                if (it != null) srcNameField.set(methodEntry, it)
            }
        }
    }

    @Override
    MappingsNamespace getSourceNamespace() {
        return MappingsNamespace.NAMED;
    }

    @Override
    List<Class<? extends MappingLayer>> dependsOn() {
        return List.of(IntermediaryMappingLayer.class)
    }
}