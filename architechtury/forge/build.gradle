// Credits to DarkPred for setting up the gekolib conflicts


plugins {
    id 'com.github.johnrengelman.shadow' version "7.1.2"
}

loom {
    forge {
        mixinConfig "onthebrink.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:${forge_version}"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
    // Geckolib Forge Implementation
    modImplementation("software.bernie.geckolib:geckolib-forge-1.18:${geckoLibVersion}")
    mappings(loom.layered {
        officialMojangMappings()
//        parchment("org.parchmentmc.data:parchment-$parchment_mc_version:$parchment_date@zip")
//        addLayer(new FixGeckoLibSpec())
    })
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
